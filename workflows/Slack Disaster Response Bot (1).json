{
  "name": "Slack Disaster Response Bot",
  "nodes": [
    {
      "parameters": {
        "trigger": [
          "app_mention"
        ],
        "channelId": {
          "__rl": true,
          "value": "C09D77BCJAV",
          "mode": "list",
          "cachedResultName": "all-ai-agent-playground"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "79ecfbf5-4f0b-4c0c-aaeb-bd6b6a2e9dfb",
      "name": "Slack Trigger",
      "webhookId": "1296eecb-fa08-4c95-be15-b9ccb1157f58",
      "credentials": {
        "slackApi": {
          "id": "ee9s7N9YBLgmtXgo",
          "name": "Slack Bot"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        80,
        208
      ],
      "id": "67e1cdf4-edfd-49ac-a08c-cf3ebfba617b",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "heKFno7sII5Ecx7W",
          "name": "OpenAi Disaster Response"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.user }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        224,
        208
      ],
      "id": "49536337-1613-431c-a14f-d1bc60bc1a98",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "YVjBLiBX0ix6jcyP",
          "name": "PostgresDB-Kura"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"state\": \"California\",\n\t\"city\": \"Oakland\",\n    \"response\": \"The response from the AI\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        576,
        176
      ],
      "id": "e4e4045c-2e35-47a2-8219-a35ec82244af",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        592,
        368
      ],
      "id": "8de609d0-e9af-4ba7-9de6-875d9ba4bdbb",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "heKFno7sII5Ecx7W",
          "name": "OpenAi Disaster Response"
        }
      }
    },
    {
      "parameters": {
        "description": "Call this tool to get Disaster related information from relevant rss feeds",
        "workflowId": {
          "__rl": true,
          "value": "xOfC3LfIFQJ52GM4",
          "mode": "list",
          "cachedResultName": "Disaster News Tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        432,
        208
      ],
      "id": "29f9a617-035f-424b-b0a1-7b5af021ca92",
      "name": "Disaster News Tool"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Locale: {{ $json.output.city }}, {{ $json.output.state }}\nDisaster Notification: {{ $json.output.response }}",
        "options": {
          "systemMessage": "You are a news gathering and reporting agent that has access to tools for retrieving local weather and local news. Your job is to use configured weather and news tools that you have to get the weather for the provided \"Locale\". \n\nWhen you receive a user message:\n\nCall the weather tool using the resolved locale to get the forecast (preferably the next 3 days).\n\nCall the news tool (e.g., GNews) using the locale and relevant keywords (e.g., “local news”, “community”, “disaster”, “emergency”) to gather the latest local news.\n\nExtract and interpret the key details (e.g., weather conditions, disaster events, noteworthy headlines, time context, severity).\n\nSummarize the situation in a Slack-friendly format, following these rules:\n\nUse bold headings for each section (Weather Forecast, Local News, Disaster Notification if relevant).\n\nUse bulleted lists for forecasts or key news items. if relevant suggest links to articles.\n\nKeep sentences concise and clear.\n\nEnd with a short summary or recommendation.\n\nExample Slack Output:\n\nWeather Forecast for Oakland, California (Next 3 Days):\n\nDay 1: Sunny, high of 75°F, low of 55°F.\n\nDay 2: Partly cloudy, high of 77°F, low of 56°F.\n\nDay 3: Mostly sunny, high of 78°F, low of 57°F.\nOverall, pleasant and mild weather is expected during this period.\n\nLocal News:\n\nOakland City Council approves new housing development near downtown.\n\nLocal schools preparing for fall semester with updated safety guidelines.\n\nCommunity festival scheduled this weekend at Lake Merritt.\n\nDisaster Notification:\nCurrently, there are no specific disaster notifications affecting Oakland. Residents are encouraged to stay informed and review preparedness resources.\n\nIf location cannot be determined, or metadata is missing/uncertain, state this transparently and suggest the next best action (e.g., “Please provide your city or ZIP code to get accurate updates”)."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1040,
        0
      ],
      "id": "457e339c-2b39-47be-a153-e43b285c0262",
      "name": "Local News Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        912,
        208
      ],
      "id": "6e9032e3-a307-43cc-ae39-73e0ff021fce",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "heKFno7sII5Ecx7W",
          "name": "OpenAi Disaster Response"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Slack Trigger').item.json.user }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1072,
        240
      ],
      "id": "38236350-fe6f-48a1-9241-224b7ac52fe6",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "YVjBLiBX0ix6jcyP",
          "name": "PostgresDB-Kura"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.blocks[0].elements[0].elements[1].text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a helpful assistant and an expert in Disaster Response and Recovery. When you receive a user message use the configured tools and call the geolocation tool to determine the user’s location and get the metadata from the disaster-related Rss feeds and location data as context. Summarize the data retrieved from the the tools and provided that as the response.\n\nIf metadata is missing, uncertain, or location cannot be determined, say so transparently and suggest the next best action."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        208,
        0
      ],
      "id": "df861897-5c4b-4a68-a66b-c7af99192464",
      "name": "Disaster Response Agent"
    },
    {
      "parameters": {
        "url": "https://gnews.io/api/v4/search?",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "=\"{{ $json.output.city }},\n{{$json.output.state}}\""
            },
            {
              "name": "apikey",
              "value": "d08e2fd94f48e35ab3aebee96da234c9"
            },
            {
              "name": "max",
              "value": "10"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1296,
        224
      ],
      "id": "45124a34-0d66-4193-ada9-263900e9477e",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "AA0dxqiTaSJPu9Lt",
          "mode": "list",
          "cachedResultName": "Geolocation Tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "ip": "23.93.221.172 "
          },
          "matchingColumns": [
            "ip"
          ],
          "schema": [
            {
              "id": "ip",
              "displayName": "ip",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        336,
        240
      ],
      "id": "a4ee08e3-074b-4c64-bc50-80604fdb53ff",
      "name": "Geolocation Tool"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09D77BCJAV",
          "mode": "list",
          "cachedResultName": "all-ai-agent-playground"
        },
        "text": "={{ $json.output }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1344,
        0
      ],
      "id": "418d26b1-59b8-441c-8d57-e4c8b7ec8845",
      "name": "Send a message",
      "webhookId": "07a3bb15-5c1e-4c45-8c7a-dadadbfde504",
      "credentials": {
        "slackApi": {
          "id": "ee9s7N9YBLgmtXgo",
          "name": "Slack Bot"
        }
      }
    },
    {
      "parameters": {
        "format": "imperial",
        "cityName": "={{ $json.output.city }}, {{ $json.output.state }}"
      },
      "type": "n8n-nodes-base.openWeatherMapTool",
      "typeVersion": 1,
      "position": [
        1184,
        320
      ],
      "id": "6d609fe3-d7d8-4d5d-9407-8c7290d4070e",
      "name": "OpenWeatherMap",
      "credentials": {
        "openWeatherMapApi": {
          "id": "JuALLN5IxXQUccjX",
          "name": "OpenWeatherMap account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Disaster Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Disaster Response Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Disaster Response Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Disaster Response Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Disaster News Tool": {
      "ai_tool": [
        [
          {
            "node": "Disaster Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Local News Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Local News Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Disaster Response Agent": {
      "main": [
        [
          {
            "node": "Local News Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "Local News Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Geolocation Tool": {
      "ai_tool": [
        [
          {
            "node": "Disaster Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Local News Agent": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenWeatherMap": {
      "ai_tool": [
        [
          {
            "node": "Local News Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fe2d43a2-4c00-4823-be27-ecd1714ccb48",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c7a2ada7a6066dadf0792dd01b51a398208350d6b75f1382016fb9a1109b35c1"
  },
  "id": "ZnHmRdQFJWBphemA",
  "tags": []
}